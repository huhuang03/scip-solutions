(define (negative-interval? x) (< (upper-bound x) 0))
(define (positive-interval? x) (> (lower-bound x) 0))
(define (mul-interval-signs x y)
  (let ((lx (lower-bound x))
          (ux (upper-bound x))
	          (ly (lower-bound y))
		          (uy (upper-bound y)))
			      (cond ((and (negative-interval? x)
			                      (negative-interval? y)) (make-interval (* ux uy) (* lx ly)))
					                ((and (positive-interval? x)
							                (positive-interval? y)) (make-interval (* lx ly) (* ux uy)))
									          ((and (negative-interval? x)
										                  (positive-interval? y)) (make-interval (* lx uy) (* ux ly)))
												            ((and (positive-interval? x)
													                    (negative-interval? y)) (make-interval (* ux ly) (* lx uy)))
															              ((and (positive-interval? x)
																                      (spans-zero?   y)) (make-interval (* ux ly) (* ux uy)))
																		                ((and (negative-interval? x)
																				                (spans-zero?   y)) (make-interval (* lx uy) (* lx ly)))
																						          ((and (spans-zero?   x)
																							                  (positive-interval? y)) (make-interval (* lx uy) (* ux uy)))
																									            ((and (spans-zero?   x)
																										                    (negative-interval? y)) (make-interval (* ux ly) (* lx ly)))
																												              (else (make-interval (* (min lx ly) (max ux uy))
																													                                     (max (* ux uy) (* lx ly)))))))